/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// Simple RDDL domain                                                          //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////


domain switch-mdp {
    requirements {
        reward-deterministic,
        cpf-deterministic,
        preconditions
    };

    types {
        switch   : object;
    };

    pvariables {
    //////////////////////////////// States /////////////////////////////////
    // Passenger reached goal variable
        switch-on(switch)                : { state-fluent, bool, default=false };

    //////////////////////////////// Actions ////////////////////////////////
        toggle-switch(switch)                           : { action-fluent, bool, default = false };


    //////////////////////////////// Non-Fluents ////////////////////////////////
    };
    cdfs {
    // Pickup and Dropoff Transition function
       switch-on'(?s) =
            if (toggle-switch(?s))
                then ~switch-on(?s)
            else switch-on(?s);
          
    };

    reward =
    //    ( -5 * ( ~forall_{ ?p : passenger, ?x : xpos, ?y : ypos } [ PASSENGERS_YOU_CARE_FOR(?p) => passenger-at-dest(?p, ?x, ?y) ] ) );
    //      if ( exists_{ ?t : taxi, ?x : xpos, ?y : ypos } [ TAXI_GOAL(?x, ?y) & taxi-at(?t, ?x, ?y) ] )
    //          then 5
    //      else -5;
          if ( forall_{ ?s : switch } [ switch-on(?s) ] )
              then 5
          else -5;

    action-preconditions {
   
    };
}
non-fluents switch-mdp_single {
    domain = switch-mdp;

    objects {
        switch               : { s0 };
    };

    non-fluents {
       

    };
}

instance switch-mdp_inst_mdp_01 {
    domain = switch-mdp;
    non-fluents = switch-mdp_single;

    init-state {

    };

    horizon = 20;

    discount = 1.0;
}
